components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
   
    Twitter:
      type: object
      properties:
        tweetId:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        media:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              mediaType:
                type: string
                enum: ['image', 'gif']
                message: 'Invalid media type.'
        mentions:
          type: array
          items:
            type: string
        hashtags:
          type: array
          items:
            type: string
        visibility:
          type: string
          enum: ['EVERYONE', 'FOLLOWED', 'MENTIONED']
          default: 'EVERYONE'
        replyTo:
          type: string
          format: email
        quoteTo:
          type: string
          format: email
        repliesCount:
          type: number
        likes:
          type: array
          items:
            $ref: '#/components/schemas/User'
        retweets:
          type: array
          items:
            $ref: '#/components/schemas/User'
      example:
        tweetId: abc123
        content: 'This is a tweet!'
        author:
          id: 5ebac534954b54139806c112
          email: fake@example.com
          name: fake name
          role: user
        media:
          - url: 'https://example.com/image.jpg'
            mediaType: 'image'
        mentions:
          - 'user1'
          - 'user2'
        hashtags:
          - 'tech'
          - 'openapi'
        visibility: 'EVERYONE'
        replyTo: 'def456'  # tweetId of the tweet being replied to
        quoteTo: 'ghi789'  # tweetId of the tweet being quoted
        repliesCount: 10
        likes:
          - id: 123
            email: 'user@example.com'
            name: 'John Doe'
            role: 'user'
        retweets:
          - id: 456
            email: 'anotheruser@example.com'
            name: 'Jane Doe'
            role: 'user'

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
